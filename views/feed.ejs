<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feed - Sellit</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@300;400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #2C3E50;
            --secondary: #fff;
            --accent: #87CEEB;
            --light: #f0f8ff;
            --dark: #2C3E50;
            --gray: #708090;
            --border: #e6f3ff;
            --shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: var(--light);
            color: var(--dark);
            line-height: 1.5;
        }

        /* Header */
        .feed-header {
            background: var(--secondary);
            border-bottom: 1px solid var(--border);
            padding: 12px 0;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .feed-header .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .feed-header h1 {
            font-size: 20px;
            font-weight: 600;
            color: var(--primary);
        }

        .create-post-btn {
            background: var(--primary);
            color: var(--secondary);
            border: none;
            padding: 8px 16px;
            border-radius: 2px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: background-color 0.2s;
        }

        .create-post-btn:hover {
            background: #005885;
        }

        /* Main Content */
        .feed-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Create Post */
        .create-post {
            background: var(--secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 16px;
            box-shadow: var(--shadow);
        }

        .create-post-form {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .post-input {
            border: 1px solid var(--border);
            border-radius: 4px;
            padding: 12px;
            font-family: inherit;
            resize: vertical;
            min-height: 80px;
            font-size: 14px;
        }

        .post-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 1px var(--primary);
        }

        .post-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
        }

        .file-input-wrapper input[type="file"] {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-btn {
            background: var(--secondary);
            border: 1px solid var(--border);
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 6px;
            color: var(--gray);
            font-size: 14px;
            transition: all 0.2s;
        }

        .file-btn:hover {
            background: var(--hover);
            border-color: var(--primary);
        }

        .post-submit {
            background: var(--primary);
            color: var(--secondary);
            border: none;
            padding: 8px 16px;
            border-radius: 2px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .post-submit:hover {
            background: #005885;
        }

        .post-submit:disabled {
            background: var(--gray);
            cursor: not-allowed;
        }

        /* Posts */
        .post {
            background: var(--secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            margin-bottom: 16px;
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .post:hover {
            box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.15), 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .post-header {
            display: flex;
            align-items: flex-start;
            padding: 16px;
            border-bottom: 1px solid var(--border);
        }

        .delete-post-btn {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            transition: all 0.2s;
            font-size: 14px;
            margin-left: auto;
            flex-shrink: 0;
        }

        .delete-post-btn:hover {
            background: rgba(220, 53, 69, 0.1);
            color: var(--danger);
        }

        .post-author-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--secondary);
            font-weight: 600;
            font-size: 18px;
            margin-right: 12px;
            flex-shrink: 0;
        }

        .post-author-info {
            flex: 1;
            min-width: 0;
        }

        .post-author-info h4 {
            font-size: 14px;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 2px;
        }

        .post-meta {
            font-size: 12px;
            color: var(--gray);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .post-time {
            font-size: 12px;
            color: var(--gray);
        }

        .post-content {
            padding: 16px;
        }

        .post-text {
            margin-bottom: 12px;
            font-size: 14px;
            line-height: 1.6;
            color: var(--dark);
        }

        .post-images {
            display: grid;
            gap: 8px;
            margin-bottom: 12px;
        }

        .post-images.single img {
            width: 100%;
            max-height: 400px;
            object-fit: cover;
            border-radius: 4px;
        }

        .post-images.multiple {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

        .post-images.multiple img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 4px;
        }

        .post-actions {
            display: flex;
            justify-content: space-around;
            padding: 8px 16px;
            border-top: 1px solid var(--border);
        }

        .action-btn {
            background: none;
            border: none;
            color: var(--gray);
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s;
            font-size: 14px;
            font-weight: 600;
        }

        .action-btn:hover {
            background: var(--hover);
            color: var(--dark);
        }

        .action-btn.liked {
            color: var(--danger);
        }

        .action-btn i {
            font-size: 16px;
        }

        /* Comments */
        .comments-section {
            border-top: 1px solid var(--border);
            background: var(--hover);
        }

        .comments-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .comment {
            padding: 12px 16px;
            border-bottom: 1px solid var(--border);
            display: flex;
            gap: 10px;
            background: var(--secondary);
        }

        .comment:last-child {
            border-bottom: none;
        }

        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--secondary);
            font-weight: 600;
            font-size: 12px;
            flex-shrink: 0;
        }

        .comment-content {
            flex: 1;
            min-width: 0;
        }

        .comment-author {
            font-weight: 600;
            font-size: 13px;
            margin-bottom: 4px;
            color: var(--dark);
        }

        .comment-text {
            font-size: 14px;
            line-height: 1.4;
            margin-bottom: 4px;
            color: var(--dark);
        }

        .comment-time {
            font-size: 11px;
            color: var(--gray);
        }

        .comment-form {
            padding: 12px 16px;
            border-top: 1px solid var(--border);
            display: flex;
            gap: 10px;
            background: var(--secondary);
        }

        .comment-input {
            flex: 1;
            border: 1px solid var(--border);
            border-radius: 20px;
            padding: 8px 16px;
            font-family: inherit;
            font-size: 14px;
        }

        .comment-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 1px var(--primary);
        }

        .comment-submit {
            background: var(--primary);
            color: var(--secondary);
            border: none;
            padding: 8px 16px;
            border-radius: 2px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .comment-submit:hover {
            background: #005885;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 8px;
            margin-top: 24px;
        }

        .page-btn {
            background: var(--secondary);
            border: 1px solid var(--border);
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            color: var(--dark);
            font-size: 14px;
            transition: all 0.2s;
        }

        .page-btn:hover,
        .page-btn.active {
            background: var(--primary);
            color: var(--secondary);
            border-color: var(--primary);
        }

        .page-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: var(--secondary);
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--dark);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: var(--gray);
        }

        .modal-body {
            padding: 20px;
        }

        .send-recipient,
        .send-message {
            margin-bottom: 16px;
        }

        .send-recipient label,
        .send-message label {
            display: block;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 8px;
            font-size: 14px;
        }

        .post-preview {
            margin-bottom: 20px;
            padding: 16px;
            background: var(--light);
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        .post-preview h4 {
            margin-bottom: 12px;
            color: var(--dark);
            font-size: 14px;
            font-weight: 600;
        }

        .post-preview-content {
            font-size: 14px;
            line-height: 1.5;
            color: var(--dark);
            max-height: 200px;
            overflow-y: auto;
        }

        .cancel-btn {
            background: var(--gray) !important;
            margin-right: 12px;
        }

        .cancel-btn:hover {
            background: var(--dark) !important;
        }

        /* Loading states */
        .loading {
            text-align: center;
            padding: 20px;
            color: var(--gray);
        }

        .spinner {
            border: 3px solid var(--border);
            border-top: 3px solid var(--primary);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            background: var(--secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            box-shadow: var(--shadow);
        }

        .empty-state i {
            font-size: 48px;
            color: var(--gray);
            margin-bottom: 16px;
        }

        .empty-state h3 {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--dark);
        }

        .empty-state p {
            color: var(--gray);
            margin-bottom: 20px;
            font-size: 14px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .feed-container {
                padding: 10px;
            }

            .post-actions {
                padding: 6px 12px;
            }

            .action-btn {
                padding: 6px;
                font-size: 12px;
            }

            .action-btn i {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <%- include('./partials/header') %>

    <!-- Feed Header -->
    <header class="feed-header">
        <div class="container">
            <h1>Feed</h1>
            <button class="create-post-btn" onclick="openCreatePostModal()">
                <i class="fas fa-edit"></i>
                Start a post
            </button>
        </div>
    </header>

    <!-- Main Feed -->
    <main class="feed-container">
        <!-- Create Post Form (Modal) -->
        <div id="createPostModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Create a post</h2>
                    <button class="modal-close" onclick="closeCreatePostModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="createPostForm" action="/posts" method="POST" enctype="multipart/form-data">
                        <textarea
                            name="content"
                            placeholder="What do you want to talk about?"
                            class="post-input"
                            maxlength="3000"
                        ></textarea>

                        <div class="post-actions">
                            <div class="file-input-wrapper">
                                <input type="file" id="postImages" name="images" accept="image/*" multiple>
                                <label for="postImages" class="file-btn">
                                    <i class="fas fa-image"></i>
                                    Photo
                                </label>
                            </div>
                            <button type="submit" class="post-submit">Post</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Send Post Modal -->
        <div id="sendPostModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Send Post</h2>
                    <button class="modal-close" onclick="closeSendPostModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="sendPostForm" onsubmit="submitSendPost(event)">
                        <div class="send-recipient">
                            <label for="recipient">Send to:</label>
                            <input
                                type="text"
                                id="recipient"
                                name="recipient"
                                placeholder="Enter recipient's name or email"
                                class="post-input"
                                required
                            >
                        </div>

                        <div class="send-message">
                            <label for="message">Add a message:</label>
                            <textarea
                                name="message"
                                id="sendMessage"
                                placeholder="Add a personal message (optional)"
                                class="post-input"
                                maxlength="200"
                                rows="3"
                            ></textarea>
                        </div>

                        <div class="post-preview">
                            <h4>Post Preview:</h4>
                            <div id="postPreview" class="post-preview-content">
                                <!-- Post content will be inserted here -->
                            </div>
                        </div>

                        <div class="post-actions">
                            <button type="button" class="post-submit cancel-btn" onclick="closeSendPostModal()">Cancel</button>
                            <button type="submit" class="post-submit">Send</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Posts Feed -->
        <% if (posts && posts.length > 0) { %>
            <% posts.forEach(post => { %>
                <article class="post" data-post-id="<%= post._id %>">
                    <!-- Post Header -->
                    <div class="post-header">
                        <div class="post-author-avatar">
                            <%= (post.author.name || 'U')[0].toUpperCase() %>
                        </div>
                        <div class="post-author-info">
                            <h4><%= post.author.name || 'Unknown User' %></h4>
                            <div class="post-meta">
                                <span class="post-time" datetime="<%= post.createdAt %>">
                                    <%= new Date(post.createdAt).toLocaleDateString('en-US', {
                                        month: 'short',
                                        day: 'numeric',
                                        year: 'numeric'
                                    }) %>
                                </span>
                                <span>•</span>
                                <i class="fas fa-globe-americas"></i>
                            </div>
                        </div>
                        <% if (user && (user._id === post.authorId || user.role === 'admin')) { %>
                            <button class="delete-post-btn" onclick="deletePost('<%= post._id %>')" title="Delete post">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        <% } %>
                    </div>

                    <!-- Post Content -->
                    <div class="post-content">
                        <% if (post.content) { %>
                            <p class="post-text"><%= post.content %></p>
                        <% } %>

                        <% if (post.images && post.images.length > 0) { %>
                            <div class="post-images <%= post.images.length === 1 ? 'single' : 'multiple' %>">
                                <% post.images.forEach(image => { %>
                                    <img src="<%= image %>" alt="Post image" loading="lazy">
                                <% }); %>
                            </div>
                        <% } %>
                    </div>

                    <!-- Post Actions -->
                    <div class="post-actions">
                        <button class="action-btn like-btn" onclick="toggleLike('<%= post._id %>')">
                            <i class="far fa-thumbs-up"></i>
                            <span>Like</span>
                            <% if (post.likes && post.likes.length > 0) { %>
                                <span class="likes-count">(<%= post.likes.length %>)</span>
                            <% } %>
                        </button>
                        <button class="action-btn comment-btn" onclick="toggleComments('<%= post._id %>')">
                            <i class="far fa-comment-dots"></i>
                            <span>Comment</span>
                            <% if (post.comments && post.comments.length > 0) { %>
                                <span class="comments-count">(<%= post.comments.length %>)</span>
                            <% } %>
                        </button>
                        <button class="action-btn share-btn" onclick="openShareModal('<%= post._id %>')">
                            <i class="fas fa-share"></i>
                            <span>Share</span>
                            <% if (post.shares && post.shares > 0) { %>
                                <span class="shares-count">(<%= post.shares %>)</span>
                            <% } %>
                        </button>
                    </div>

                    <!-- Comments Section -->
                    <div class="comments-section" id="comments-<%= post._id %>" style="display: none;">
                        <div class="comments-list">
                            <% if (post.comments && post.comments.length > 0) { %>
                                <% post.comments.forEach(comment => { %>
                                    <div class="comment">
                                        <div class="comment-avatar">
                                            <%= (comment.authorName || 'U')[0].toUpperCase() %>
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-author"><%= comment.authorName || 'Unknown' %></div>
                                            <div class="comment-text"><%= comment.content %></div>
                                            <div class="comment-time">
                                                <%= new Date(comment.createdAt).toLocaleDateString('en-US', {
                                                    month: 'short',
                                                    day: 'numeric'
                                                }) %>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="comment" style="justify-content: center; color: var(--gray); font-style: italic;">
                                    No comments yet. Be the first to comment.
                                </div>
                            <% } %>
                        </div>

                        <!-- Comment Form -->
                        <form class="comment-form" onsubmit="addComment(event, '<%= post._id %>')">
                            <input
                                type="text"
                                class="comment-input"
                                placeholder="Add a comment..."
                                maxlength="200"
                                required
                            >
                            <button type="submit" class="comment-submit">Post</button>
                        </form>
                    </div>
                </article>
            <% }); %>

            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <div class="pagination">
                    <% if (hasPrev) { %>
                        <a href="/feed?page=<%= currentPage - 1 %>" class="page-btn">Previous</a>
                    <% } %>

                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <a href="/feed?page=<%= i %>" class="page-btn <%= i === currentPage ? 'active' : '' %>">
                            <%= i %>
                        </a>
                    <% } %>

                    <% if (hasNext) { %>
                        <a href="/feed?page=<%= currentPage + 1 %>" class="page-btn">Next</a>
                    <% } %>
                </div>
            <% } %>
        <% } else { %>
            <!-- Empty State -->
            <div class="empty-state">
                <i class="fas fa-newspaper"></i>
                <h3>Your feed is empty</h3>
                <p>Follow people and pages to see their posts in your feed, or start sharing your own content.</p>
                <button class="create-post-btn" onclick="openCreatePostModal()">
                    <i class="fas fa-edit"></i>
                    Create your first post
                </button>
            </div>
        <% } %>
    </main>

    <script>
        // Modal functions
        function openCreatePostModal() {
            document.getElementById('createPostModal').classList.add('show');
        }

        function closeCreatePostModal() {
            document.getElementById('createPostModal').classList.remove('show');
            document.getElementById('createPostForm').reset();
        }

        // Close modal when clicking outside
        document.getElementById('createPostModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeCreatePostModal();
            }
        });

        // Close send modal when clicking outside
        document.getElementById('sendPostModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeSendPostModal();
            }
        });

        // Like functionality
        async function toggleLike(postId) {
            try {
                const response = await fetch(`/posts/${postId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    const likeBtn = post.querySelector('.like-btn');
                    const likesCount = post.querySelector('.likes-count');

                    likeBtn.classList.toggle('liked');
                    if (data.likesCount > 0) {
                        likesCount.textContent = `(${data.likesCount})`;
                        likesCount.style.display = 'inline';
                    } else {
                        likesCount.style.display = 'none';
                    }

                    // Update icon
                    const icon = likeBtn.querySelector('i');
                    if (data.liked) {
                        icon.className = 'fas fa-thumbs-up';
                        likeBtn.style.color = 'var(--primary)';
                    } else {
                        icon.className = 'far fa-thumbs-up';
                        likeBtn.style.color = 'var(--gray)';
                    }
                }
            } catch (error) {
                console.error('Error toggling like:', error);
                alert('Failed to toggle like. Please try again.');
            }
        }

        // Comments functionality
        function toggleComments(postId) {
            const commentsSection = document.getElementById(`comments-${postId}`);
            const isVisible = commentsSection.style.display !== 'none';

            if (isVisible) {
                commentsSection.style.display = 'none';
            } else {
                commentsSection.style.display = 'block';
                // Focus on comment input
                const commentInput = commentsSection.querySelector('.comment-input');
                if (commentInput) {
                    setTimeout(() => commentInput.focus(), 100);
                }
            }
        }

        async function addComment(event, postId) {
            event.preventDefault();

            const form = event.target;
            const input = form.querySelector('.comment-input');
            const content = input.value.trim();

            if (!content) return;

            try {
                const response = await fetch(`/posts/${postId}/comments`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ content })
                });

                const data = await response.json();

                if (data.success) {
                    input.value = '';
                    // Reload the page to show the new comment
                    location.reload();
                }
            } catch (error) {
                console.error('Error adding comment:', error);
                alert('Failed to add comment. Please try again.');
            }
        }

        // Share functionality
        async function sharePost(postId) {
            try {
                const response = await fetch(`/posts/${postId}/share`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    const sharesCount = post.querySelector('.shares-count');
                    sharesCount.textContent = `(${data.sharesCount})`;
                    sharesCount.style.display = data.sharesCount > 0 ? 'inline' : 'none';

                    alert('Post shared successfully!');
                }
            } catch (error) {
                console.error('Error sharing post:', error);
                alert('Failed to share post. Please try again.');
            }
        }

        // Delete post functionality
        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/posts/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    post.remove();
                    alert('Post deleted successfully!');
                } else {
                    alert(data.error || 'Failed to delete post.');
                }
            } catch (error) {
                console.error('Error deleting post:', error);
                alert('Failed to delete post. Please try again.');
            }
        }

        // Send functionality
        let currentSendPostId = null;

        function sendPost(postId) {
            currentSendPostId = postId;

            // Get post content
            const post = document.querySelector(`[data-post-id="${postId}"]`);
            const postText = post.querySelector('.post-text');
            const postImages = post.querySelector('.post-images');

            // Populate preview
            const preview = document.getElementById('postPreview');
            preview.innerHTML = '';

            if (postText) {
                const textDiv = document.createElement('div');
                textDiv.textContent = postText.textContent;
                textDiv.style.marginBottom = '12px';
                preview.appendChild(textDiv);
            }

            if (postImages) {
                const imagesDiv = document.createElement('div');
                imagesDiv.textContent = '[Contains images]';
                imagesDiv.style.fontStyle = 'italic';
                imagesDiv.style.color = 'var(--gray)';
                preview.appendChild(imagesDiv);
            }

            // Open modal
            document.getElementById('sendPostModal').classList.add('show');
        }

        function closeSendPostModal() {
            document.getElementById('sendPostModal').classList.remove('show');
            document.getElementById('sendPostForm').reset();
            currentSendPostId = null;
        }

        async function submitSendPost(event) {
            event.preventDefault();

            const form = event.target;
            const recipient = form.recipient.value.trim();
            const message = form.sendMessage.value.trim();

            if (!recipient) {
                alert('Please enter a recipient.');
                return;
            }

            try {
                // In a real app, this would send the post to the recipient
                // For now, we'll just simulate sending
                alert(`Post sent to ${recipient} successfully!${message ? '\nMessage: ' + message : ''}`);

                closeSendPostModal();
            } catch (error) {
                console.error('Error sending post:', error);
                alert('Failed to send post. Please try again.');
            }
        }

        // Form validation
        document.getElementById('createPostForm').addEventListener('submit', function(e) {
            const content = this.querySelector('[name="content"]').value.trim();
            const images = this.querySelector('[name="images"]').files;

            if (!content && images.length === 0) {
                e.preventDefault();
                alert('Please add some content or images to your post.');
                return false;
            }
        });

        // Initialize like button states
        document.addEventListener('DOMContentLoaded', function() {
            // This would need to be implemented to check which posts the user has liked
            // For now, we'll assume no posts are liked initially
        });
    </script>
</body>
</html>